{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-pdsa","title":"Welcome to PDSA","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":""},{"location":"#project-layout","title":"Project layout","text":""},{"location":"pdf/embeding/","title":"Embeding","text":""},{"location":"week1/exception_handling/","title":"Exception handling","text":"<p>Exception Handling: Making Your Python Code Robust</p> <p>In Python programming, exceptions are events that disrupt the normal flow of your code's execution. These can arise from various situations, such as:</p> <ul> <li>Division by zero (e.g., <code>10 / 0</code>)</li> <li>Accessing elements outside a list's or array's index range (e.g., <code>my_list[10]</code> when the list has only 5 elements)</li> <li>File-related errors (e.g., trying to open a non-existent file)</li> <li>Network errors (e.g., attempting to connect to a unavailable server)</li> <li>User input errors (e.g., the user enters an invalid value)</li> </ul> <p>If left unhandled, exceptions can cause your program to crash abruptly, leading to a frustrating user experience. Exception handling provides a mechanism to gracefully manage these errors, making your code more robust and user-friendly.</p> <p>Core Constructs: <code>try</code>, <code>except</code>, and <code>finally</code></p> <p>Python offers three primary keywords for exception handling:</p> <ol> <li> <p><code>try</code> block: This block encloses the code that might potentially raise an exception.</p> </li> <li> <p><code>except</code> block: This block follows the <code>try</code> block and specifies how to handle exceptions that occur within the <code>try</code> block. You can have multiple <code>except</code> blocks to catch different types of exceptions:</p> </li> <li> <p>Bare <code>except</code>: Catches any exception type. Use this cautiously, as it can mask more specific errors.</p> </li> <li> <p><code>except ExceptionType</code>: Catches a specific exception type (e.g., <code>except ZeroDivisionError</code>).</p> </li> <li> <p><code>finally</code> block (optional): This block executes unconditionally, whether an exception occurs or not. It's often used for cleanup tasks like closing files or releasing resources.</p> </li> </ol> <p>Example:</p> <pre><code>def calculate_average(numbers):\n    try:\n        total = sum(numbers)\n        average = total / len(numbers)\n        return average\n    except ZeroDivisionError:\n        print(\"Error: Cannot divide by zero. Please provide a non-empty list.\")\n    finally:\n        print(\"Calculation completed.\")\n\n# Example usage\nnumbers = [1, 2, 3]\nresult = calculate_average(numbers)\nprint(result)  # Output: 2.0\n\nnumbers = []\nresult = calculate_average(numbers)  # Output: Error: Cannot divide by zero. Please provide a non-empty list.\n                                    #          Calculation completed.\n</code></pre> <p>Explanation:</p> <ul> <li>The <code>calculate_average</code> function takes a list of numbers.</li> <li>The <code>try</code> block attempts to calculate the average.</li> <li>If a <code>ZeroDivisionError</code> occurs (division by zero), the corresponding <code>except</code> block prints an error message.</li> <li>The <code>finally</code> block always executes, regardless of exceptions, and prints a completion message.</li> </ul> <p>Key Points:</p> <ul> <li>Use specific exception types in <code>except</code> blocks for targeted handling.</li> <li><code>finally</code> is useful for essential cleanup tasks.</li> <li>Consider using <code>else</code> after the <code>try</code> block to execute code if no exception occurs.</li> <li>For more complex scenarios, you can nest <code>try...except</code> blocks.</li> </ul> <p>By effectively incorporating exception handling into your Python code, you can create more reliable and user-friendly applications.</p> <p>Python provides a rich set of built-in exceptions that cover various error conditions. Here's a comprehensive list of some common exceptions you'll encounter:</p> <p>Base Exceptions:</p> <ul> <li><code>BaseException</code>: The root class for all built-in exceptions. It's not meant to be directly used.</li> </ul> <p>Standard Exceptions:</p> <ul> <li><code>ArithmeticError</code>: Raised when an error occurs in arithmetic operations (e.g., division by zero).</li> <li><code>AssertionError</code>: Raised when an <code>assert</code> statement fails.</li> <li><code>AttributeError</code>: Raised when an attribute reference or assignment fails.</li> <li><code>EOFError</code>: Raised when <code>input()</code> hits the end-of-file (EOF) condition.</li> <li><code>FloatingPointError</code>: Raised when a result is too large or too small for a floating-point representation.</li> <li><code>GeneratorExit</code>: Raised when <code>next()</code> is called on a generator that has finished executing.</li> <li><code>ImportError</code>: Raised when importing a module fails.</li> <li><code>IndexError</code>: Raised when the index of a sequence is out of range.</li> <li><code>KeyError</code>: Raised when a key is not found in a dictionary.</li> <li><code>KeyboardInterrupt</code>: Raised when the user interrupts the program with Ctrl+C or Delete.</li> <li><code>LookupError</code>: Raised when a lookup operation (e.g., <code>x in y</code>) fails. This is the base class for <code>IndexError</code> and <code>KeyError</code>.</li> <li><code>MemoryError</code>: Raised when an operation runs out of memory.</li> <li><code>NameError</code>: Raised when a variable is not found in local or global scope.</li> <li><code>NotImplementedError</code>: Raised when an abstract method or requested operation isn't implemented.</li> <li><code>OSError</code>: Raised when a system-related operation causes an error. This is the base class for numerous OS-specific exceptions.</li> <li><code>OverflowError</code>: Raised when the result of an arithmetic operation is too large to be represented.</li> <li><code>RuntimeError</code>: Raised when some error occurs during runtime that doesn't fall into another category.</li> <li><code>StopIteration</code>: Raised by the <code>next()</code> function when there are no more elements in an iterator.</li> <li><code>SyntaxError</code>: Raised when a syntax error (invalid code) is encountered.</li> <li><code>SystemError</code>: Raised when an internal interpreter error occurs.</li> <li><code>SystemExit</code>: Raised by the <code>sys.exit()</code> function to exit the program.</li> <li><code>TabError</code>: Raised when inconsistent tabs and spaces are used for indentation.</li> <li><code>TypeError</code>: Raised when an operation or function receives an argument of an inappropriate type.</li> <li><code>ValueError</code>: Raised when an operation or function receives an argument that has an invalid value.</li> <li><code>Warning</code>: The base class for warning exceptions. It's not an error, but indicates a potential problem.</li> </ul> <p>Custom Exceptions:</p> <p>You can also define your own custom exceptions by subclassing the <code>Exception</code> class. This allows you to create specific exceptions for your application's needs.</p> <p>Remember that this list covers the most common built-in exceptions. The Python documentation provides a more exhaustive reference: https://docs.python.org/3/library/exceptions.html</p>"}]}