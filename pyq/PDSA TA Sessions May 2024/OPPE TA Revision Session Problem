{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOq0BN2UVJEBoACoDhoHJqy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Binary Search"],"metadata":{"id":"Zwr7NjyaX8e0"}},{"cell_type":"markdown","source":["### 1. [Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/)"],"metadata":{"id":"ZIKgJFAzX_sK"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"VUH72cysX5ZC"},"outputs":[],"source":["class Solution:\n","    def findMin(self, nums: List[int]) -> int:\n","            left, right = 0, len(nums) - 1\n","\n","            while left < right:\n","                mid = (left + right) // 2\n","\n","                # If middle element is greater than the rightmost element,\n","                # the minimum must be in the right half\n","                if nums[mid] > nums[right]:\n","                    left = mid + 1\n","                # Otherwise, the minimum must be in the left half (including mid)\n","                else:\n","                    right = mid\n","\n","            # When left equals right, that's the smallest element\n","            return nums[left]"]},{"cell_type":"markdown","source":["### 2. [Find Peak Element](https://leetcode.com/problems/find-peak-element/description/)\n"],"metadata":{"id":"NBS4PxrpYJrn"}},{"cell_type":"code","source":["class Solution:\n","    def findPeakElement(self, nums):\n","        left, right = 0, len(nums) - 1\n","\n","        while left < right:\n","            mid = (left + right) // 2\n","\n","            if nums[mid] > nums[mid + 1]:\n","                # Peak is in the left half or at mid\n","                right = mid\n","            else:\n","                # Peak is in the right half\n","                left = mid + 1\n","\n","        return left\n"],"metadata":{"id":"Sd96Dm_sYPDr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 3. [Find First and Last Position of Element in Sorted Array]"],"metadata":{"id":"_KmGYJBRYZaz"}},{"cell_type":"code","source":["class Solution:\n","    def searchRange(self, nums, target):\n","\n","        # Find the leftmost index\n","        def findLeft(nums, target):\n","            left, right = 0, len(nums) - 1\n","            while left <= right:\n","                mid = (left + right) // 2\n","                if nums[mid] < target:\n","                    left = mid + 1\n","                else:\n","                    right = mid - 1\n","            return left\n","\n","        # Find the rightmost index\n","        def findRight(self, nums, target):\n","            left, right = 0, len(nums) - 1\n","            while left <= right:\n","                mid = (left + right) // 2\n","                if nums[mid] <= target:\n","                    left = mid + 1\n","                else:\n","                    right = mid - 1\n","            return right\n","\n","        left_idx = findLeft(nums, target)\n","        right_idx = findRight(nums, target)\n","\n","        # Check if the target is actually within the found range. Validating the answer\n","        if left_idx <= right_idx and left_idx < len(nums) and nums[left_idx] == target and nums[right_idx] == target:\n","            return [left_idx, right_idx]\n","        else:\n","            return [-1, -1]\n"],"metadata":{"id":"GyQxcGQHYYCy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Linked Lists"],"metadata":{"id":"11-sjikYYqPU"}},{"cell_type":"markdown","source":["### 1. [Middle of the Linked List](https://leetcode.com/problems/middle-of-the-linked-list/description/)"],"metadata":{"id":"DW2os0JVYt_q"}},{"cell_type":"code","source":["class Solution:\n","    def get_length(self, head):\n","        counter = 0\n","        while head:\n","            counter += 1\n","            head = head.next\n","        return counter\n","\n","\n","    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\n","        n = self.get_length(head)\n","        if not head:\n","            return\n","        i = 0\n","        while i < n // 2:\n","            head = head.next\n","            i+=1\n","        return head"],"metadata":{"id":"fzbcwnJoY15T"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 2. [Delete the Middle Node](https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/description/)"],"metadata":{"id":"uiCcC4HlY2uz"}},{"cell_type":"code","source":["class Solution:\n","    def get_length(self, head):\n","        counter = 0\n","        while head:\n","            counter += 1\n","            head = head.next\n","        return counter\n","\n","    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n","        mid = self.get_length(head) // 2\n","        i = 0\n","\n","        current = head\n","\n","        # Stopping one node before the middle node\n","        while i < mid - 1:\n","            current = current.next\n","            i += 1\n","\n","        # Change links of the node before to\n","        if current.next and current.next.next:\n","            current.next = current.next.next\n","        else:\n","            current.next = None\n","        return head"],"metadata":{"id":"b5aQH4hZY664"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 3. Remove Nth Node From End of List"],"metadata":{"id":"lQ23jdUaY-i1"}},{"cell_type":"code","source":["class Solution:\n","    def get_length(self, head):\n","        counter = 0\n","        while head:\n","            counter += 1\n","            head = head.next\n","        return counter\n","\n","    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n","        length = self.get_length(head)\n","        k = length - n # k => node to delete from start\n","\n","        # An edge case\n","        if k == 0:\n","            return head.next\n","\n","        # Same Logic as previous question. Only instead of mid, we have \"k\"\n","        i = 0\n","        current = head\n","        while i < k - 1:\n","            current = current.next\n","\n","            i += 1\n","\n","        if current.next and current.next.next:\n","            current.next = current.next.next\n","        else:\n","            current.next = None\n","        return head"],"metadata":{"id":"FMFHjCkCZEKI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 4. [Odd Even Linked List](https://leetcode.com/problems/odd-even-linked-list/description/)"],"metadata":{"id":"7wvZhzGCZY5Z"}},{"cell_type":"code","source":["class Solution:\n","    def oddEvenList(self, head: ListNode) -> ListNode:\n","        if not head or not head.next:\n","            return head\n","\n","        # Initialize the odd and even pointers\n","        odd = head\n","        even = head.next\n","        even_head = even  # To keep track of the head of the even indexed list\n","\n","        # Traverse the list and separate nodes into odd and even lists\n","        while even and even.next:\n","            odd.next = even.next\n","            odd = odd.next\n","            even.next = odd.next\n","            even = even.next\n","\n","        # Connect the end of the odd indexed list to the head of the even indexed list\n","        odd.next = even_head\n","\n","        return head"],"metadata":{"id":"HMicUuL3Zc-m"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 5. [Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists/description/)"],"metadata":{"id":"MaIsJSqsZh_N"}},{"cell_type":"code","source":["class Solution:\n","    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n","        # Exact Same logic as Mergesort- only applied to Linked List\n","\n","\n","        dummy = ListNode()\n","        current = dummy\n","\n","        # Iterate as long as neither list is exhausted\n","        while list1 and list2:\n","            if list1.val < list2.val:\n","                current.next = list1\n","                list1 = list1.next\n","            else:\n","                current.next = list2\n","                list2 = list2.next\n","            current = current.next\n","\n","        # Attach the remaining nodes of list1 or list2\n","        if list1:\n","            current.next = list1\n","        elif list2:\n","            current.next = list2\n","\n","        # The merged list is next to the dummy node\n","        return dummy.next"],"metadata":{"id":"jZfvATH4ZlEQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Graphs"],"metadata":{"id":"vWwZyohNZvtD"}},{"cell_type":"markdown","source":["# 1. [Find If Path Exists in Graph](https://leetcode.com/problems/find-if-path-exists-in-graph/description/)"],"metadata":{"id":"x776j0r7Zw4y"}},{"cell_type":"code","source":["from collections import deque\n","\n","class Solution:\n","    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:\n","        adj_list = { i:[ ] for i in range(n) }\n","        visited = set()\n","        for u, v in edges:\n","            adj_list[u].append(v)\n","            adj_list[v].append(u)\n","\n","        queue = deque([source])\n","        visited.add(source)\n","        while queue:\n","            vertex = queue.popleft()\n","            if vertex == destination:\n","                return True\n","            for neighbor in adj_list[vertex]:\n","                if neighbor not in visited:\n","                    queue.append(neighbor)\n","                    visited.add(neighbor)\n","        return False"],"metadata":{"id":"e-wox3Y9ac9-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 2. [Number of Provinces](https://leetcode.com/problems/number-of-provinces/description/)"],"metadata":{"id":"ajgWpTmkafHe"}},{"cell_type":"code","source":["from collections import deque\n","\n","class Solution:\n","    def get_neighbors(self, AMat, vertex):\n","        # Given a vertex and the AMat, returns all it's neighbors\n","        neighbors = []\n","        for i in range(len(AMat)):\n","            if AMat[vertex][i] == 1:\n","                neighbors.append(i)\n","        return neighbors\n","\n","    def BFS(self, AMat, source):\n","        # Plain old BFS\n","        visited = set()\n","        queue = deque([source])\n","        visited.add(source)\n","        while queue:\n","            vertex = queue.popleft()\n","            neighbors = self.get_neighbors(AMat, vertex)\n","            for neighbor in neighbors:\n","                if neighbor not in visited:\n","                    queue.append(neighbor)\n","                    visited.add(neighbor)\n","        # Return all the vertices that were visited in one iteration of the BFS. That is, all vertices belonging to one component\n","        return visited\n","\n","    def findCircleNum(self, isConnected):\n","        components = {i: -1 for i in range(len(isConnected))}\n","        component_number = 0\n","        seen = 0\n","\n","        # As long as there are more vertices that are to be seen, find a non-visited vertex and run BFS from it.\n","        while seen < len(isConnected):\n","            startv = min([i for i in range(len(isConnected)) if components[i] == -1])\n","            visited = self.BFS(isConnected, startv)\n","\n","            # For every vertex visited in that BFS iteration, assign one component number to it\n","            for v in visited:\n","                components[v] = component_number\n","                seen += 1\n","            # increment the component number so that a different component number is used the next time BFS is run\n","            component_number += 1\n","\n","        return component_number"],"metadata":{"id":"nL8EfSU7algo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 3. [All Paths From Source To Target](https://leetcode.com/problems/all-paths-from-source-to-target/)\n","\n","This problem is very similar to PrPA 4.2"],"metadata":{"id":"lRozI3rRbTVC"}},{"cell_type":"code","source":["def preprocessing(graph):\n","    \"\"\"Converts the graph array into an adjacency matrix\"\"\"\n","    n = len(graph)\n","    AMat = [ [ 0 for i in range(n)] for i in range(n)]\n","    for i in range(n):\n","        for j in graph[i]:\n","            AMat[i][j] = 1\n","    return AMat\n","\n","def get_neighbors(AMat, vertex):\n","    \"\"\"Returns neigbors of a vertex given an adjacency matrix\"\"\"\n","    neighbors = []\n","    for i in range(len(AMat)):\n","        if AMat[vertex][i] == 1:\n","            neighbors.append(i)\n","    return neighbors\n","\n","# Initialization Function for DFS\n","def DFSInitList(AMat):\n","    (visited,parent) = ({},{})\n","    for each_vertex in len(AList):\n","        visited[each_vertex] = False\n","        parent[each_vertex] = -1\n","    return(visited,parent)\n","\n","# DFS Recursive Implementation for Adjacency list\n","def DFSList(AMat,visited, v, path, destination, all_paths):\n","    path.append(v)\n","\n","    # if the current node is the destination, then we've found a path. So we can return\n","    if v == destination:\n","        all_paths.append(path.copy())\n","        path.pop() # Necessary condition\n","        visited[v] = False\n","        return\n","    # Mark vertex v as visited vertex\n","    visited[v] = True\n","    # Repeat following for each unvisited adjacent of vertex v\n","    for adj_vertex in get_neighbors(AMat, v):\n","        if (not visited[adj_vertex]):\n","            # Recursively call the DFS on unvisited adjacent of v\n","            DFSList(AMat,visited, adj_vertex, path, destination, all_paths)\n","\n","    path.pop()\n","    visited[v] = False\n","    return\n","\n","class Solution:\n","    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:\n","        all_paths = [ ]\n","        path=[]\n","        AMat = preprocessing(graph)\n","        visited = {v:False for v in range(len(graph))}\n","        DFSList(AMat, visited, 0, path, len(graph) - 1, all_paths)\n","        return all_paths"],"metadata":{"id":"7xEMNBhubWiV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 4. [Course Schedule](https://leetcode.com/problems/course-schedule/description/)"],"metadata":{"id":"ZSF-QAvJbpdc"}},{"cell_type":"code","source":["from collections import deque, Counter\n","\n","class Solution:\n","    def canFinish(self, numCourse, prerequisites):\n","        AList = { i: [] for i in range(numCourse)}\n","        indegree = Counter()\n","        visited = { i:False for i in range(numCourse)}\n","\n","        # Convert the prerequisites array into an adjaceny list and compute the indegrees of each vertex\n","        for course, prereq in prerequisites:\n","            AList[prereq].append(course)\n","            indegree[course] += 1\n","\n","        # Initialization\n","        toposortlist = []\n","        zerodegreeq = deque()\n","\n","        # Find the vertex with indegree 0 and added into the queue\n","        for u in range(numCourse):\n","            if indegree[u] == 0:\n","                zerodegreeq.append(u)\n","\n","        # Topological sort Computing process\n","        while (zerodegreeq):\n","            # Remove one vertex from queue which have zero degree vertices\n","            curr_vertex = zerodegreeq.popleft()\n","            # Store the removed vertex in toposortlist and reduce the indegree by one\n","            toposortlist.append(curr_vertex)\n","            indegree[curr_vertex] = indegree[curr_vertex]-1\n","\n","            # Repeat for each adjacent of the removed vertex\n","            for adj_vertex in AList[curr_vertex]:\n","                # Reduce the indegree of each adjacent of the removed vertex by 1\n","                indegree[adj_vertex] = indegree[adj_vertex] - 1\n","                # If after reducing the degree of adjacent, it becomes zero then insert it into the queue\n","                if indegree[adj_vertex] == 0:\n","                    zerodegreeq.append(adj_vertex)\n","\n","\n","        # At the end of the topological sort, if all the vertices have been reached, then we can return true. Else we return false\n","        return len(toposortlist) == numCourse\n"],"metadata":{"id":"uMG5SZx5buwJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 5. [Course Schedule-II](https://leetcode.com/problems/course-schedule-ii/description/)"],"metadata":{"id":"heelf78kbzEG"}},{"cell_type":"code","source":["class Solution:\n","    def preprocessing(self, numCourses, prerequisites) -> list[list[int]]:\n","        adjacency_matrix = [ [0 for i in range(numCourses)] for i in range(numCourses) ]\n","        for a, b in prerequisites:\n","            adjacency_matrix[b][a] = 1\n","        return adjacency_matrix\n","\n","    # Implementation of Topological sort for Adjacency matrix\n","    def toposort(self, AMat):\n","        #Initialization\n","        (rows,cols) = len(AMat), len(AMat[0])\n","        indegree = {}\n","        toposortlist = []\n","\n","        #Compute indegree for each vertex\n","        for c in range(cols):\n","            indegree[c] = 0\n","            for r in range(rows):\n","                if AMat[r][c] == 1:\n","                    indegree[c] = indegree[c] + 1\n","\n","        # Topological sort Computing process\n","        for i in range(rows):\n","            # Select the min level vertex for removing the graph which has indegree 0\n","            zero_indegree = [k for k in range(cols) if indegree[k] == 0]\n","            if not zero_indegree:return toposortlist #Handle the case where there are no more zero indegree vertices\n","\n","            j = zero_indegree[0]\n","            # Store the removed vertex j in toposortlist and reduce the indegree by one\n","            toposortlist.append(j)\n","            indegree[j] = indegree[j] - 1\n","\n","            # Reduce the indegree of each adjacent of the removed vertex j by 1\n","            for k in range(cols):\n","                if AMat[j][k] == 1:\n","                    indegree[k] = indegree[k] - 1\n","\n","        return(toposortlist)\n","\n","    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n","        adjacency_matrix = self.preprocessing(numCourses, prerequisites)\n","        toposortlist = self.toposort(adjacency_matrix)\n","\n","        # Check if all vertices have been reached. If reached, return the topological sorted list. Else return empty lisr\n","        if len(toposortlist) == numCourses: return toposortlist\n","        return []"],"metadata":{"id":"WupqpdyHb4nV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 6. [Network Delay Time](https://leetcode.com/problems/network-delay-time/description/)"],"metadata":{"id":"K46O3e6ecYIL"}},{"cell_type":"code","source":["import heapq\n","\n","class Solution:\n","    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n","        # Convert the \"times\" array into an adjacency list\n","        WList = { i:[] for i in range(1, n+1) }\n","        visited = {i : False for i in range(1, n+1)}\n","        for u, v, w in times:\n","            WList[u].append((v, w))\n","\n","\n","        # Run Dijkstra on it\n","        dist = {node: float('inf') for node in range(1, n+1)}\n","        dist[k] = 0\n","\n","        # Priority queue\n","        heap = [(0, k)]  # (distance, node)\n","\n","        while heap:\n","            current_dist, node = heapq.heappop(heap) # By default, heapq.heappop(heap) returns the minimum element from heap\n","            visited[node] = True\n","            if current_dist > dist[node]:\n","                continue\n","\n","            for neighbor, weight in WList[node]:\n","                if visited[neighbor]:\n","                    continue\n","                distance = current_dist + weight\n","                if distance < dist[neighbor]:\n","                    dist[neighbor] = distance\n","                    heapq.heappush(heap, (distance, neighbor))\n","\n","        # The minimum time taken for the signal to reach all the vertices, is the same as the last vertex to get \"burnt\" in Dijkstra's algorithm, which is the same as\n","        # maximum of shortest distance values\n","        max_dist = max(dist.values())\n","        return max_dist if max_dist != float('inf') else -1 # Check if all nodes can be reached or not."],"metadata":{"id":"r_zToU-uccYN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 7. [Min Cost to Connect All Points](https://leetcode.com/problems/min-cost-to-connect-all-points/description/)"],"metadata":{"id":"1XI1B56mc2qn"}},{"cell_type":"code","source":["def kruskal(WList):\n","    \"\"\"Kruskal's as per the PDSA book\"\"\"\n","    (edges,component,TE) = ([],{},[])\n","    for u in WList.keys():\n","        edges.extend([(d,u,v) for (v,d) in WList[u]])\n","        component[u] = u\n","\n","    edges.sort()\n","\n","    for (d,u,v) in edges:\n","        if component[u] != component[v]:\n","            TE.append((u,v, d))\n","            c = component[u]\n","            for w in WList.keys():\n","                if component[w] == c:\n","                    component[w] = component[v]\n","\n","def compute_min_cost(TE) -> int:\n","    # Compute the Minimum Cost based on Tree Edges\n","    min_cost = 0\n","    for u, v, d in TE:\n","        min_cost += d\n","    return(min_cost)\n","\n","class Solution:\n","    def minCostConnectPoints(self, points: List[List[int]]) -> int:\n","        # Init Adjacency Matrix\n","        AList = { i : [] for i in range(len(points))}\n","\n","        # Each point can be connected to every other point and their manhattan distance can be computed.\n","        for i in range(len(points)):\n","            x1, y1 = points[i][0], points[i][1]\n","            for j in range(i + 1, len(points)):\n","                x2, y2 = points[j][0], points[j][1]\n","                dist = abs(x1 - x2) + abs(y1 - y2)\n","\n","                # Distance from point i to j is same as from j to i. So init both entries\n","                AList[i].append((j, dist))\n","                AList[j].append((i, dist))\n","\n","        tree_edges = kruskal(AList)\n","        minimum_cost = compute_min_cost(tree_edges)\n","        return minimum_cost"],"metadata":{"id":"RxBgHDF_c6wh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Dynamic Programming"],"metadata":{"id":"pJSP2hUedS4u"}},{"cell_type":"markdown","source":["### 1. [Fibonacci Number](https://leetcode.com/problems/fibonacci-number/description/)"],"metadata":{"id":"1RUhochsdU1r"}},{"cell_type":"code","source":["class Solution:\n","    def fib(self, n: int) -> int:\n","        # Initialize the fibtable array to be all zeros\n","        fibtable = [0] * (n + 1)\n","\n","        # Base Case 1: Where n == 0\n","        if n == 0: return fibtable[0]\n","\n","        # Base Case 2: Where n == 1\n","        fibtable[1] = 1\n","\n","        for i in range(2, n + 1):\n","            #F(n) = F(n - 1) + F(n - 2)\n","            fibtable[i] = fibtable[i - 1] + fibtable[i - 2]\n","\n","        # fibtable[i] is the ith fibonacci number. Thus, to get nth fibonacci number, return fibtable[n]\n","        return fibtable[n]"],"metadata":{"id":"IdCqxfSydT9y"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 2. [Climbing Stairs](https://leetcode.com/problems/climbing-stairs/description/)"],"metadata":{"id":"jGHc2j08dbGu"}},{"cell_type":"code","source":["class Solution:\n","    def climbStairs(self, n: int) -> int:\n","        # Base Cases\n","\n","        if n == 1: return 1 # 0 -> 1\n","        if n == 2: return 2\n","\n","        # Initialize the dp array\n","        L = [0]*n\n","\n","        # To reach the 1st step, there's only one way.\n","        # To reach the second step,\n","        # there are two ways:\n","        # 0 -> 2\n","        # 0 -> 1 -> 1\n","        L[0] = 1\n","        L[1] = 2\n","\n","        # Every subsequent step, is just the sum of number of ways to\n","        # reach i - 1th step and the i - 2nd step.\n","\n","        # L[i] => Number of ways in which we can reach the i + 1th step\n","        for i in range(2, n):\n","            L[i] = L[i - 1] + L[i - 2]\n","        return L[-1]"],"metadata":{"id":"tBo6uyU1dgoS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 3. [House Robber](https://leetcode.com/problems/house-robber/description/)"],"metadata":{"id":"jqDD3SoseDWM"}},{"cell_type":"code","source":["class Solution:\n","    def rob(self, nums: List[int]) -> int:\n","        # Base case\n","        if len(nums) == 1:\n","            return nums[0]\n","\n","        maximum_amount = [0] * len(nums)\n","        maximum_amount[0] = nums[0]\n","        maximum_amount[1] = max(nums[0], nums[1])\n","\n","        for i in range(2, len(nums)):\n","            maximum_amount[i] = max(maximum_amount[i-1], maximum_amount[i-2] + nums[i])\n","        return maximum_amount[-1]"],"metadata":{"id":"45PuPX4YeHmD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 4. [Triangle](https://leetcode.com/problems/triangle/)"],"metadata":{"id":"PvYpi8RveKAw"}},{"cell_type":"code","source":["class Solution:\n","    def minimumTotal(self, triangle: List[List[int]]) -> int:\n","        # Start from the second-to-last row of the triangle\n","        for row in range(len(triangle) - 2, -1, -1):\n","            for col in range(len(triangle[row])):\n","                # Update the current element with the sum of the element itself\n","                # and the minimum of the two adjacent elements in the row below\n","                triangle[row][col] = triangle[row][col] +  min(triangle[row + 1][col], triangle[row + 1][col + 1])\n","\n","        # The top element now contains the minimum path sum\n","        return triangle[0][0]"],"metadata":{"id":"xBYIyNJ8eLu_"},"execution_count":null,"outputs":[]}]}